// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`array > snapshot 1`] = `
"[]

[]

// TODO:
// [
// 	//
// ]

[0]

[0]

[
  0, //
]

[
  0,
]

[0, 1]

[
  "zero",
  "one",
  "two",
  "three",
  "four",
  "five",
  "six",
  "seven",
  "eight",
  "nine",
  "ten",
  "eleven",
  "twelve",
]
"
`;

exports[`assign > snapshot 1`] = `
"lhs = rhs

lhs += rhs

lhs -= rhs
"
`;

exports[`call > snapshot 1`] = `
"f()

f(0)

f(0, 1)

f(@() {
  //
})

f(0, 1, @() {
  //
})

f(
  super_ultra_hyper_mega_miracle_ultimate_extremely_very_long_argument_expression,
  @() {
    //
  }
)

f({ en: ["foo", "bar", "baz", "qux"], ja: ["hoge", "fuga", "piyo"] }, @(a) {
  a
})

f(@(array) {
  each (let element, array) {
    <: \`type = {Core:type(element)}, value = {element}\`
  }
})

f(
  {
    hoge: 1,
  },
  last_argument
)
"
`;

exports[`comments > snapshot 1`] = `
"// comment

/*
multi
line
comment
*/

// leading comment
[0, 1, 2] // end of line
// trailing comment

[/* */ 0]

[0 /* */]

[/* */]

{ /* */ }

@() { /* */ }
"
`;

exports[`definition > snapshot 1`] = `
"var hoge = 0
var fuga: str = f()

let c = 299792458
let g: num = 9.81

let f = @() {}
"
`;

exports[`function > snapshot 1`] = `
"@f() {}

@f(param) {}

@f(
  parameter1,
  parameter2,
  parameter3,
  parameter4,
  parameter5,
  parameter6,
  parameter7,
  parameter8
) {}

@add(a, b) { a + b }

@double(a: num) { a * 2 }

@() {}
"
`;

exports[`literals > snapshot 1`] = `
"null

true
false

42
6.28

"Hello AiScript!"
'"'
// TODO: "\\\\"
"\\"'"

\`Hello {name}!\`
\`\\\`\`
\`\\{\`
// TODO: \`\\\\\`
"
`;

exports[`object > snapshot 1`] = `
"{}

{}

// TODO:
// {
// 	//
// }

{ hoge: 0 }

{ hoge: 0, fuga: 1 }

{
  hoge: 0,
}

{
  hoge: 0,
  fuga: 1,
  piyo: 2,
}

{
  hoge: // 1
  0, // 2
  fuga: 1, // 3
  piyo: // 4
  2,
}
"
`;

exports[`parens > snapshot 1`] = `
"(a + b)()

(a - b).prop

(a * b)[index]

(@() {})()

(exists a) || b

eval { a }.b

(!a).b

(1 + 2) / (3 + 4)
1 - (2 + 3)
"
`;

exports[`prettier-ignore > snapshot 1`] = `
"// prettier-ignore
[
	0, 1,
	2, 3,
]

// prettier-ignore
f()

// prettier-ignore
target.prop

// prettier-ignore
target[index]
"
`;

exports[`statements > snapshot 1`] = `
"return result

break

continue

loop { 0 }

// TODO: while (condition) {}

// TODO: do {} while (condition)

for (10) {}

for (let i, 10) {}

for (let i = 0, 10) {}

each (let x, xs) {}
"
`;

exports[`toplevel > snapshot 1`] = `
"### {}

### {
  hoge: 0,
}

### hoge {}

:: Empty {}

:: A {
  let hoge = 0

  :: B {
    let fuga = 2
    let piyo = 3
  }

  :: C { let foo = -1 }
}
"
`;
